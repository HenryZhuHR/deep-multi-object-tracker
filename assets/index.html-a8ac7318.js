import{_ as o,r as l,o as r,c,a as e,b as s,d as a,e as t}from"./app-2c58eac0.js";const i={},p=t('<h1 id="deep-multi-object-tracker" tabindex="-1"><a class="header-anchor" href="#deep-multi-object-tracker" aria-hidden="true">#</a> Deep Multi-Object Tracker</h1><h2 id="环境" tabindex="-1"><a class="header-anchor" href="#环境" aria-hidden="true">#</a> 环境</h2><p>Ubuntu</p><h2 id="安装" tabindex="-1"><a class="header-anchor" href="#安装" aria-hidden="true">#</a> 安装</h2><p>需要下载如下源码包，并放置在 <code>temp</code> 目录下，首次运行的时候会自动编译这些库，编译后安装目录为 <code>libs</code></p>',5),d={href:"https://eigen.tuxfamily.org/index.php?title=Main_Page",target:"_blank",rel:"noopener noreferrer"},_=e("code",null,"eigen-3.4.0.tar.gz",-1),u=e("code",null,".tar.bz2",-1),b={href:"https://github.com/gflags/gflags/tree/v2.2.2",target:"_blank",rel:"noopener noreferrer"},h=e("code",null,"gflags-2.2.2.tar.gz",-1),m={href:"https://github.com/microsoft/onnxruntime/releases",target:"_blank",rel:"noopener noreferrer"},g=e("code",null,"onnxruntime-linux-x64-gpu-1.15.1.tgz",-1),v={href:"https://github.com/opencv/opencv/releases",target:"_blank",rel:"noopener noreferrer"},k=e("code",null,"opencv-4.5.5.tar.gz",-1),f={href:"https://github.com/opencv/opencv_contrib/releases/tag",target:"_blank",rel:"noopener noreferrer"},x=e("code",null,"opencv_contrib-4.5.5.tar.gz",-1),E=t(`<blockquote><p>如果下载其他版本，则修改修改脚本<code>scripts/build.sh</code>中的版本号 ( 搜索 <code># TODO 修改源码包的版本号</code>)</p></blockquote><p>如果系统内已经安装了这些库，可以设置 <code>CMAKE_PREFIX_PATH</code> 和 <code>ONNXRUNTIME_HOME</code> 环境变量，</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 修改为 eigen 实际路径</span>
<span class="token builtin class-name">export</span> <span class="token assign-left variable">EIGEN_HOME</span><span class="token operator">=</span>libs/eigen
<span class="token comment"># 修改为 gflags 实际路径</span>
<span class="token builtin class-name">export</span> <span class="token assign-left variable">GFLAGS_HOME</span><span class="token operator">=</span>libs/gflags
<span class="token comment"># 修改为 opencv 实际路径</span>
<span class="token builtin class-name">export</span> <span class="token assign-left variable">OPENCV_HOME</span><span class="token operator">=</span>libs/opencv
<span class="token comment"># 修改为 onnxruntime 实际路径</span>
<span class="token builtin class-name">export</span> <span class="token assign-left variable">ONNXRUNTIME_HOME</span><span class="token operator">=</span>libs/onnxruntime-linux-x64-gpu-1.15.1
<span class="token builtin class-name">export</span> <span class="token assign-left variable">CMAKE_PREFIX_PATH</span><span class="token operator">=</span><span class="token variable">$CMAKE_PREFIX_PATH</span><span class="token builtin class-name">:</span><span class="token variable">$EIGEN_HOME</span>/eigen/share/eigen3/cmake:<span class="token variable">$GFLAGS_HOME</span>/gflags/lib/cmake/gflags:<span class="token variable">$OPENCV_HOME</span>/lib/cmake/opencv4
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,3);function M(O,N){const n=l("ExternalLinkIcon");return r(),c("div",null,[p,e("ul",null,[e("li",null,[e("a",d,[_,s(n)]),a("("),u,a(" 也可以)")]),e("li",null,[e("a",b,[h,s(n)])]),e("li",null,[e("a",m,[g,s(n)])]),e("li",null,[e("a",v,[k,s(n)]),a(" 和 "),e("a",f,[x,s(n)])])]),E])}const I=o(i,[["render",M],["__file","index.html.vue"]]);export{I as default};
